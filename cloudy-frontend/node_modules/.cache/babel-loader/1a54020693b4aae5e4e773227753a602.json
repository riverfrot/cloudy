{"ast":null,"code":"// 로컬 스토리지에 JSON 형태로 저장 / 불러오기 / 삭제 헬퍼\nvar storage = {\n  set: function set(key, object) {\n    if (!localStorage) return;\n    localStorage[key] = typeof object === \"string\" ? object : JSON.stringify(object);\n  },\n  get: function get(key) {\n    if (!localStorage) return null;\n\n    if (!localStorage[key]) {\n      return null;\n    }\n\n    try {\n      var parsed = JSON.parse(localStorage[key]);\n      return parsed;\n    } catch (e) {\n      return localStorage[key];\n    }\n  },\n  remove: function remove(key) {\n    if (!localStorage) return null;\n\n    if (localStorage[key]) {\n      localStorage.removeItem(key);\n    }\n  }\n};\nexport default storage;","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/lib/storage.js"],"names":["storage","set","key","object","localStorage","JSON","stringify","get","parsed","parse","e","remove","removeItem"],"mappings":"AAAA;AACA,IAAMA,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,aAACC,GAAD,EAAMC,MAAN,EAAiB;AACpB,QAAI,CAACC,YAAL,EAAmB;AACnBA,IAAAA,YAAY,CAACF,GAAD,CAAZ,GACE,OAAOC,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCE,IAAI,CAACC,SAAL,CAAeH,MAAf,CADxC;AAED,GALa;AAMdI,EAAAA,GAAG,EAAE,aAAAL,GAAG,EAAI;AACV,QAAI,CAACE,YAAL,EAAmB,OAAO,IAAP;;AAEnB,QAAI,CAACA,YAAY,CAACF,GAAD,CAAjB,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,QAAI;AACF,UAAMM,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,YAAY,CAACF,GAAD,CAAvB,CAAf;AACA,aAAOM,MAAP;AACD,KAHD,CAGE,OAAOE,CAAP,EAAU;AACV,aAAON,YAAY,CAACF,GAAD,CAAnB;AACD;AACF,GAnBa;AAoBdS,EAAAA,MAAM,EAAE,gBAAAT,GAAG,EAAI;AACb,QAAI,CAACE,YAAL,EAAmB,OAAO,IAAP;;AAEnB,QAAIA,YAAY,CAACF,GAAD,CAAhB,EAAuB;AACrBE,MAAAA,YAAY,CAACQ,UAAb,CAAwBV,GAAxB;AACD;AACF;AA1Ba,CAAhB;AA6BA,eAAeF,OAAf","sourcesContent":["// 로컬 스토리지에 JSON 형태로 저장 / 불러오기 / 삭제 헬퍼\nconst storage = {\n  set: (key, object) => {\n    if (!localStorage) return;\n    localStorage[key] =\n      typeof object === \"string\" ? object : JSON.stringify(object);\n  },\n  get: key => {\n    if (!localStorage) return null;\n\n    if (!localStorage[key]) {\n      return null;\n    }\n\n    try {\n      const parsed = JSON.parse(localStorage[key]);\n      return parsed;\n    } catch (e) {\n      return localStorage[key];\n    }\n  },\n  remove: key => {\n    if (!localStorage) return null;\n\n    if (localStorage[key]) {\n      localStorage.removeItem(key);\n    }\n  }\n};\n\nexport default storage;\n"]},"metadata":{},"sourceType":"module"}