{"ast":null,"code":"import _classCallCheck from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/chatroom/ChatRoomMessageInputContainer.js\";\nimport React, { Component } from \"react\";\nimport ChatRoomMessageInput from \"components/chatroom/ChatRoomMessageInput\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport storage from \"lib/storage\";\nimport * as chatActions from \"store/modules/chat\";\n\nvar ChatRoomMessageInputContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatRoomMessageInputContainer, _Component);\n\n  function ChatRoomMessageInputContainer() {\n    var _this;\n\n    _classCallCheck(this, ChatRoomMessageInputContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatRoomMessageInputContainer).call(this));\n\n    _this.handleChatSend = function () {\n      var _this$props = _this.props,\n          ChatActions = _this$props.ChatActions,\n          socket = _this$props.socket,\n          chatMessage = _this$props.chatMessage; // 리듀서 쪽에서 데이터를\n      // socket을 통해서 mongoDB에 데이터 저장하는 부분 작성해야함.\n      // 메시지 보낸 후에 페이지 최하단에 스크롤이 위치하도록 셋팅.\n\n      var docScrollHeight = document.documentElement.scrollHeight;\n      document.documentElement.scrollTop = docScrollHeight;\n\n      if (chatMessage !== \"\") {\n        //채팅 메시지 보내는 부분.\n        ChatActions.sendChatMessage({\n          msg: chatMessage,\n          userID: _this.nickname\n        });\n        socket.emit(\"chat message\", chatMessage, _this.nickname);\n      }\n    };\n\n    _this.handleChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n      var ChatActions = _this.props.ChatActions; // console.log({ name, value });\n\n      ChatActions.changeChatMessageInput({\n        name: name,\n        value: value\n      });\n    };\n\n    _this.handleKeyPress = function (e) {\n      // 엔터 키를 누르면 로그인 호출\n      if (e.key === \"Enter\") {\n        _this.handleChatSend();\n      }\n    };\n\n    _this.nickname = storage.get(\"loggedNickname\");\n    return _this;\n  }\n\n  _createClass(ChatRoomMessageInputContainer, [{\n    key: \"render\",\n    value: function render() {\n      var handleChatSend = this.handleChatSend,\n          handleChange = this.handleChange,\n          handleKeyPress = this.handleKeyPress;\n      var chatMessage = this.props.chatMessage;\n      return React.createElement(ChatRoomMessageInput, {\n        chatMessage: chatMessage,\n        onChange: handleChange,\n        onKeyPress: handleKeyPress,\n        onChatSend: handleChatSend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return ChatRoomMessageInputContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    chatMessage: state.chat.get(\"chatMessage\"),\n    timestamp: state.chat.get(\"tiemstamp\"),\n    who_send: state.chat.get(\"who_send\")\n  };\n}, function (dispatch) {\n  return {\n    ChatActions: bindActionCreators(chatActions, dispatch)\n  };\n})(ChatRoomMessageInputContainer);","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/chatroom/ChatRoomMessageInputContainer.js"],"names":["React","Component","ChatRoomMessageInput","connect","bindActionCreators","storage","chatActions","ChatRoomMessageInputContainer","handleChatSend","props","ChatActions","socket","chatMessage","docScrollHeight","document","documentElement","scrollHeight","scrollTop","sendChatMessage","msg","userID","nickname","emit","handleChange","e","target","name","value","changeChatMessageInput","handleKeyPress","key","get","state","chat","timestamp","who_send","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,oBAAP,MAAiC,0CAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;;IAEMC,6B;;;;;AACJ,2CAAc;AAAA;;AAAA;;AACZ;;AADY,UAIdC,cAJc,GAIG,YAAM;AAAA,wBACwB,MAAKC,KAD7B;AAAA,UACbC,WADa,eACbA,WADa;AAAA,UACAC,MADA,eACAA,MADA;AAAA,UACQC,WADR,eACQA,WADR,EAErB;AACA;AAEA;;AACA,UAAMC,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,YAAjD;AACAF,MAAAA,QAAQ,CAACC,eAAT,CAAyBE,SAAzB,GAAqCJ,eAArC;;AAEA,UAAID,WAAW,KAAK,EAApB,EAAwB;AACtB;AACAF,QAAAA,WAAW,CAACQ,eAAZ,CAA4B;AAAEC,UAAAA,GAAG,EAAEP,WAAP;AAAoBQ,UAAAA,MAAM,EAAE,MAAKC;AAAjC,SAA5B;AACAV,QAAAA,MAAM,CAACW,IAAP,CAAY,cAAZ,EAA4BV,WAA5B,EAAyC,MAAKS,QAA9C;AACD;AACF,KAlBa;;AAAA,UAoBdE,YApBc,GAoBC,UAAAC,CAAC,EAAI;AAAA,sBACMA,CAAC,CAACC,MADR;AAAA,UACVC,IADU,aACVA,IADU;AAAA,UACJC,KADI,aACJA,KADI;AAAA,UAEVjB,WAFU,GAEM,MAAKD,KAFX,CAEVC,WAFU,EAGlB;;AACAA,MAAAA,WAAW,CAACkB,sBAAZ,CAAmC;AAAEF,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,KAAK,EAALA;AAAR,OAAnC;AACD,KAzBa;;AAAA,UA2BdE,cA3Bc,GA2BG,UAAAL,CAAC,EAAI;AACpB;AACA,UAAIA,CAAC,CAACM,GAAF,KAAU,OAAd,EAAuB;AACrB,cAAKtB,cAAL;AACD;AACF,KAhCa;;AAEZ,UAAKa,QAAL,GAAgBhB,OAAO,CAAC0B,GAAR,CAAY,gBAAZ,CAAhB;AAFY;AAGb;;;;6BA8BQ;AAAA,UACCvB,cADD,GACkD,IADlD,CACCA,cADD;AAAA,UACiBe,YADjB,GACkD,IADlD,CACiBA,YADjB;AAAA,UAC+BM,cAD/B,GACkD,IADlD,CAC+BA,cAD/B;AAAA,UAECjB,WAFD,GAEiB,KAAKH,KAFtB,CAECG,WAFD;AAGP,aACE,oBAAC,oBAAD;AACE,QAAA,WAAW,EAAEA,WADf;AAEE,QAAA,QAAQ,EAAEW,YAFZ;AAGE,QAAA,UAAU,EAAEM,cAHd;AAIE,QAAA,UAAU,EAAErB,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;;;EA7CyCP,S;;AAgD5C,eAAeE,OAAO,CACpB,UAAA6B,KAAK;AAAA,SAAK;AACRpB,IAAAA,WAAW,EAAEoB,KAAK,CAACC,IAAN,CAAWF,GAAX,CAAe,aAAf,CADL;AAERG,IAAAA,SAAS,EAAEF,KAAK,CAACC,IAAN,CAAWF,GAAX,CAAe,WAAf,CAFH;AAGRI,IAAAA,QAAQ,EAAEH,KAAK,CAACC,IAAN,CAAWF,GAAX,CAAe,UAAf;AAHF,GAAL;AAAA,CADe,EAMpB,UAAAK,QAAQ;AAAA,SAAK;AACX1B,IAAAA,WAAW,EAAEN,kBAAkB,CAACE,WAAD,EAAc8B,QAAd;AADpB,GAAL;AAAA,CANY,CAAP,CASb7B,6BATa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ChatRoomMessageInput from \"components/chatroom/ChatRoomMessageInput\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport storage from \"lib/storage\";\nimport * as chatActions from \"store/modules/chat\";\n\nclass ChatRoomMessageInputContainer extends Component {\n  constructor() {\n    super();\n    this.nickname = storage.get(\"loggedNickname\");\n  }\n  handleChatSend = () => {\n    const { ChatActions, socket, chatMessage } = this.props;\n    // 리듀서 쪽에서 데이터를\n    // socket을 통해서 mongoDB에 데이터 저장하는 부분 작성해야함.\n\n    // 메시지 보낸 후에 페이지 최하단에 스크롤이 위치하도록 셋팅.\n    const docScrollHeight = document.documentElement.scrollHeight;\n    document.documentElement.scrollTop = docScrollHeight;\n\n    if (chatMessage !== \"\") {\n      //채팅 메시지 보내는 부분.\n      ChatActions.sendChatMessage({ msg: chatMessage, userID: this.nickname });\n      socket.emit(\"chat message\", chatMessage, this.nickname);\n    }\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    const { ChatActions } = this.props;\n    // console.log({ name, value });\n    ChatActions.changeChatMessageInput({ name, value });\n  };\n\n  handleKeyPress = e => {\n    // 엔터 키를 누르면 로그인 호출\n    if (e.key === \"Enter\") {\n      this.handleChatSend();\n    }\n  };\n  render() {\n    const { handleChatSend, handleChange, handleKeyPress } = this;\n    const { chatMessage } = this.props;\n    return (\n      <ChatRoomMessageInput\n        chatMessage={chatMessage}\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n        onChatSend={handleChatSend}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    chatMessage: state.chat.get(\"chatMessage\"),\n    timestamp: state.chat.get(\"tiemstamp\"),\n    who_send: state.chat.get(\"who_send\")\n  }),\n  dispatch => ({\n    ChatActions: bindActionCreators(chatActions, dispatch)\n  })\n)(ChatRoomMessageInputContainer);\n"]},"metadata":{},"sourceType":"module"}