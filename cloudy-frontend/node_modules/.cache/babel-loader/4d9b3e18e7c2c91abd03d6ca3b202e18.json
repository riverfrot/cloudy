{"ast":null,"code":"import _defineProperty from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _objectSpread2;\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport { pender } from \"redux-pender\";\nimport * as api from \"lib/api\";\nvar USER_REGISTER = \"register/USER_REGISTER\";\nvar CHANGE_INPUT = \"register/CHANGE_INPUT\";\nvar SET_ERROR = \"register/SET_ERROR\";\nvar REGISTER_SUCCESS = \"register/REGISTER_SUCCESS\";\nvar INITIALIZE = \"register/INITIALIZE\";\nvar CHECK_PASSWORD_EQUAL = \"register/CHECK_PASSWORD_EQUAL\";\nvar CHECK_INPUT_LENGTH = \"register/CHECK_INPUT_LENGTH\"; // 액션 생성자\n// 유저 회원가입할때 사용하는것\n\nexport var userRegister = createAction(USER_REGISTER, api.registerUser);\nexport var initialize = createAction(INITIALIZE);\nexport var changeInput = createAction(CHANGE_INPUT);\nexport var setError = createAction(SET_ERROR);\nexport var checkPasswordEqual = createAction(CHECK_PASSWORD_EQUAL);\nexport var changeInputLength = createAction(CHECK_INPUT_LENGTH);\nexport var registerSuccess = createAction(REGISTER_SUCCESS); // 초기 state\n\nvar initialState = Map({\n  id: \"\",\n  nickname: \"\",\n  password: \"\",\n  passwordCheck: \"\",\n  message: \"\",\n  overlapPoint: \"\",\n  passwordEqual: \"null\",\n  lengthCheck: Map({\n    id: \"id\",\n    password: \"password\",\n    passwordCheck: \"passwordCheck\",\n    nickname: \"nickname\"\n  })\n}); // 리듀서 여기서 모든상태 변화가 일어남.\n\nexport default handleActions(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, INITIALIZE, function () {\n  return initialState;\n}), _defineProperty(_objectSpread2, CHANGE_INPUT, function (state, action) {\n  var _action$payload = action.payload,\n      value = _action$payload.value,\n      name = _action$payload.name;\n  var state_status;\n\n  if (name === \"id\") {\n    value.length < 4 ? state_status = state.set(name, value).setIn([\"lengthCheck\", name], \"null\") : state_status = state.set(name, value).setIn([\"lengthCheck\", name], name);\n  }\n\n  if (name === \"password\") {\n    value.length < 6 ? state_status = state.set(name, value).setIn([\"lengthCheck\", name], \"null\") : state_status = state.set(name, value).setIn([\"lengthCheck\", name], name);\n  }\n\n  if (name === \"passwordCheck\") {\n    value.length < 6 ? state_status = state.set(name, value).setIn([\"lengthCheck\", name], \"null\") : state_status = state.set(name, value).setIn([\"lengthCheck\", name], name);\n  }\n\n  if (name === \"nickname\") {\n    value.length < 4 ? state_status = state.set(name, value).setIn([\"lengthCheck\", name], \"null\") : state_status = state.set(name, value).setIn([\"lengthCheck\", name], name);\n  }\n\n  return state_status;\n}), _defineProperty(_objectSpread2, SET_ERROR, function (state, action) {\n  var _action$payload2 = action.payload,\n      message = _action$payload2.message,\n      overlapPoint = _action$payload2.overlapPoint;\n  return state.set(\"message\", message).set(\"overlapPoint\", overlapPoint);\n}), _defineProperty(_objectSpread2, CHECK_PASSWORD_EQUAL, function (state, action) {\n  var _action$payload3 = action.payload,\n      password = _action$payload3.password,\n      passwordCheck = _action$payload3.passwordCheck;\n  var state_status;\n  password === passwordCheck ? state_status = state.set(\"passwordEqual\", \"equal\") : state_status = state.set(\"passwordEqual\", \"notEqual\");\n  return state_status;\n}), _defineProperty(_objectSpread2, REGISTER_SUCCESS, function (state) {\n  return state.set(\"message\", \"\").set(\"overlapPoint\", \"\").set(\"id\", \"\").set(\"password\", \"\").set(\"passwordCheck\", \"\").set(\"nickName\", \"\");\n}), _objectSpread2), pender({\n  type: USER_REGISTER,\n  onSuccess: function onSuccess(state, action) {\n    var id = action.payload.data;\n    var password = action.payload.data;\n    var nickname = action.payload.data;\n    return state.set(\"id\", id).set(\"password\", password) // .set(\"Password\", PasswordCheck)\n    .set(\"nickname\", nickname);\n  }\n})), initialState);","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/store/modules/register.js"],"names":["createAction","handleActions","Map","pender","api","USER_REGISTER","CHANGE_INPUT","SET_ERROR","REGISTER_SUCCESS","INITIALIZE","CHECK_PASSWORD_EQUAL","CHECK_INPUT_LENGTH","userRegister","registerUser","initialize","changeInput","setError","checkPasswordEqual","changeInputLength","registerSuccess","initialState","id","nickname","password","passwordCheck","message","overlapPoint","passwordEqual","lengthCheck","state","action","payload","value","name","state_status","length","set","setIn","type","onSuccess","data"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport { pender } from \"redux-pender\";\nimport * as api from \"lib/api\";\n\nconst USER_REGISTER = \"register/USER_REGISTER\";\nconst CHANGE_INPUT = \"register/CHANGE_INPUT\";\nconst SET_ERROR = \"register/SET_ERROR\";\nconst REGISTER_SUCCESS = \"register/REGISTER_SUCCESS\";\nconst INITIALIZE = \"register/INITIALIZE\";\nconst CHECK_PASSWORD_EQUAL = \"register/CHECK_PASSWORD_EQUAL\";\nconst CHECK_INPUT_LENGTH = \"register/CHECK_INPUT_LENGTH\";\n\n// 액션 생성자\n// 유저 회원가입할때 사용하는것\nexport const userRegister = createAction(USER_REGISTER, api.registerUser);\nexport const initialize = createAction(INITIALIZE);\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const setError = createAction(SET_ERROR);\nexport const checkPasswordEqual = createAction(CHECK_PASSWORD_EQUAL);\nexport const changeInputLength = createAction(CHECK_INPUT_LENGTH);\nexport const registerSuccess = createAction(REGISTER_SUCCESS);\n\n// 초기 state\nconst initialState = Map({\n  id: \"\",\n  nickname: \"\",\n  password: \"\",\n  passwordCheck: \"\",\n  message: \"\",\n  overlapPoint: \"\",\n  passwordEqual: \"null\",\n  lengthCheck: Map({\n    id: \"id\",\n    password: \"password\",\n    passwordCheck: \"passwordCheck\",\n    nickname: \"nickname\"\n  })\n});\n\n// 리듀서 여기서 모든상태 변화가 일어남.\nexport default handleActions(\n  {\n    [INITIALIZE]: () => initialState,\n    [CHANGE_INPUT]: (state, action) => {\n      const { value, name } = action.payload;\n\n      let state_status;\n\n      if (name === \"id\") {\n        value.length < 4\n          ? (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], \"null\"))\n          : (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], name));\n      }\n      if (name === \"password\") {\n        value.length < 6\n          ? (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], \"null\"))\n          : (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], name));\n      }\n      if (name === \"passwordCheck\") {\n        value.length < 6\n          ? (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], \"null\"))\n          : (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], name));\n      }\n      if (name === \"nickname\") {\n        value.length < 4\n          ? (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], \"null\"))\n          : (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], name));\n      }\n      return state_status;\n    },\n\n    [SET_ERROR]: (state, action) => {\n      const { message, overlapPoint } = action.payload;\n      return state.set(\"message\", message).set(\"overlapPoint\", overlapPoint);\n    },\n\n    [CHECK_PASSWORD_EQUAL]: (state, action) => {\n      const { password, passwordCheck } = action.payload;\n\n      let state_status;\n      password === passwordCheck\n        ? (state_status = state.set(\"passwordEqual\", \"equal\"))\n        : (state_status = state.set(\"passwordEqual\", \"notEqual\"));\n\n      return state_status;\n    },\n\n    [REGISTER_SUCCESS]: state => {\n      return state\n        .set(\"message\", \"\")\n        .set(\"overlapPoint\", \"\")\n        .set(\"id\", \"\")\n        .set(\"password\", \"\")\n        .set(\"passwordCheck\", \"\")\n        .set(\"nickName\", \"\");\n    },\n\n    ...pender({\n      type: USER_REGISTER,\n      onSuccess: (state, action) => {\n        const { data: id } = action.payload;\n        const { data: password } = action.payload;\n        const { data: nickname } = action.payload;\n\n        return (\n          state\n            .set(\"id\", id)\n            .set(\"password\", password)\n            // .set(\"Password\", PasswordCheck)\n            .set(\"nickname\", nickname)\n        );\n      }\n    })\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}