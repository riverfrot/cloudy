{"ast":null,"code":"import _defineProperty from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _objectSpread2;\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport { pender } from \"redux-pender\";\nimport * as api from \"lib/api\"; // 액션 타입 미리 설정하기\n// 로그인 영역에서 어떠한 액션들이 처리될지 미리 타입들을 지정함.\n\nvar USER_LOGIN = \"login/USER_LOGIN\";\nvar USER_THIRD_LOGIN = \"login/USER_THIRD_LOGIN\";\nvar USER_LOGOUT = \"login/USER_LOGOUT\";\nvar CHANGE_INPUT = \"login/CHANGE_INPUT\";\nvar SET_ERROR = \"login/SET_ERROR\";\nvar INITIALIZE = \"login/INITIALIZE\";\nvar LOGIN_SUCCESS = \"login/LOGIN_SUCCESS\";\nvar CLEAR_STORE = \"login/CLEAR_STORE\";\nvar CHECK_STATUS = \"login/CHECK_STATUS\"; // 로그인 관련 액션 생성자 만드는 부분\n\nexport var userLogin = createAction(USER_LOGIN, api.loginUser);\nexport var userThirdLogin = createAction(USER_THIRD_LOGIN, api.thirdLoginUser);\nexport var userLogout = createAction(USER_LOGOUT, api.logoutUser);\nexport var checkStatus = createAction(CHECK_STATUS, api.logoutUser);\nexport var initialize = createAction(INITIALIZE);\nexport var setError = createAction(SET_ERROR);\nexport var changeInput = createAction(CHANGE_INPUT);\nexport var loginSuccess = createAction(LOGIN_SUCCESS);\nexport var clearStore = createAction(CLEAR_STORE); // 초기 state 스토어에 등록할 로그인 데이터들\n\nvar initialState = Map({\n  id: \"\",\n  password: \"\",\n  message: \"\",\n  overlapPoint: \"\",\n  lengthCheck: Map({\n    id: \"id\",\n    password: \"password\"\n  })\n}); // 리듀서\n// 로그인에 관한 액션에 대한 처리를 담당하는 부분\n\nexport default handleActions(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, INITIALIZE, function () {\n  return initialState;\n}), _defineProperty(_objectSpread2, CHANGE_INPUT, function (state, action) {\n  var _action$payload = action.payload,\n      value = _action$payload.value,\n      name = _action$payload.name;\n  var state_status;\n\n  if (name === \"id\") {\n    value.length < 4 ? state_status = state.set(name, value).setIn([\"lengthCheck\", name], \"null\") : state_status = state.set(name, value).setIn([\"lengthCheck\", name], name);\n  }\n\n  if (name === \"password\") {\n    value.length < 6 ? state_status = state.set(name, value).setIn([\"lengthCheck\", name], \"null\") : state_status = state.set(name, value).setIn([\"lengthCheck\", name], name);\n  }\n\n  return state_status;\n}), _defineProperty(_objectSpread2, SET_ERROR, function (state, action) {\n  var _action$payload2 = action.payload,\n      message = _action$payload2.message,\n      overlapPoint = _action$payload2.overlapPoint;\n  return state.set(\"message\", message).set(\"overlapPoint\", overlapPoint);\n}), _defineProperty(_objectSpread2, LOGIN_SUCCESS, function (state) {\n  return state.set(\"message\", \"\").set(\"overlapPoint\", \"\").set(\"id\", \"\").set(\"password\", \"\");\n}), _defineProperty(_objectSpread2, CLEAR_STORE, function (state) {\n  return state.set(\"id\", \"\").set(\"password\", \"\").set(\"message\", \"\").set(\"overlapPoint\", \"\");\n}), _objectSpread2), pender({\n  type: CHECK_STATUS,\n  onSuccess: function onSuccess(state, action) {\n    // const { data } = action.payload;\n    return;\n  },\n  onFailure: function onFailure() {\n    return initialState;\n  }\n}), pender({\n  type: USER_LOGOUT,\n  onSuccess: function onSuccess(state) {\n    return state.set(\"message\", \"\").set(\"overlapPoint\", \"\").set(\"id\", \"\").set(\"password\", \"\");\n  }\n}), pender({\n  type: USER_LOGIN,\n  onSuccess: function onSuccess(state, action) {\n    var id = action.payload.data;\n    var password = action.payload.data;\n    return state.set(id).set(password);\n  }\n}), pender({\n  type: USER_THIRD_LOGIN,\n  onSuccess: function onSuccess(state, action) {\n    var id = action.payload.data;\n    var accesstoken = action.payload.data;\n    var nickName = action.payload.data;\n    return state.set(id);\n  }\n})), initialState);","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/store/modules/login.js"],"names":["createAction","handleActions","Map","pender","api","USER_LOGIN","USER_THIRD_LOGIN","USER_LOGOUT","CHANGE_INPUT","SET_ERROR","INITIALIZE","LOGIN_SUCCESS","CLEAR_STORE","CHECK_STATUS","userLogin","loginUser","userThirdLogin","thirdLoginUser","userLogout","logoutUser","checkStatus","initialize","setError","changeInput","loginSuccess","clearStore","initialState","id","password","message","overlapPoint","lengthCheck","state","action","payload","value","name","state_status","length","set","setIn","type","onSuccess","onFailure","data","accesstoken","nickName"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport { pender } from \"redux-pender\";\nimport * as api from \"lib/api\";\n\n// 액션 타입 미리 설정하기\n// 로그인 영역에서 어떠한 액션들이 처리될지 미리 타입들을 지정함.\nconst USER_LOGIN = \"login/USER_LOGIN\";\nconst USER_THIRD_LOGIN = \"login/USER_THIRD_LOGIN\";\nconst USER_LOGOUT = \"login/USER_LOGOUT\";\nconst CHANGE_INPUT = \"login/CHANGE_INPUT\";\nconst SET_ERROR = \"login/SET_ERROR\";\nconst INITIALIZE = \"login/INITIALIZE\";\nconst LOGIN_SUCCESS = \"login/LOGIN_SUCCESS\";\nconst CLEAR_STORE = \"login/CLEAR_STORE\";\nconst CHECK_STATUS = \"login/CHECK_STATUS\";\n\n// 로그인 관련 액션 생성자 만드는 부분\nexport const userLogin = createAction(USER_LOGIN, api.loginUser);\nexport const userThirdLogin = createAction(\n  USER_THIRD_LOGIN,\n  api.thirdLoginUser\n);\nexport const userLogout = createAction(USER_LOGOUT, api.logoutUser);\nexport const checkStatus = createAction(CHECK_STATUS, api.logoutUser);\nexport const initialize = createAction(INITIALIZE);\nexport const setError = createAction(SET_ERROR);\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const clearStore = createAction(CLEAR_STORE);\n\n// 초기 state 스토어에 등록할 로그인 데이터들\nconst initialState = Map({\n  id: \"\",\n  password: \"\",\n  message: \"\",\n  overlapPoint: \"\",\n  lengthCheck: Map({\n    id: \"id\",\n    password: \"password\"\n  })\n});\n\n// 리듀서\n// 로그인에 관한 액션에 대한 처리를 담당하는 부분\nexport default handleActions(\n  {\n    [INITIALIZE]: () => initialState,\n    [CHANGE_INPUT]: (state, action) => {\n      const { value, name } = action.payload;\n\n      let state_status;\n\n      if (name === \"id\") {\n        value.length < 4\n          ? (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], \"null\"))\n          : (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], name));\n      }\n      if (name === \"password\") {\n        value.length < 6\n          ? (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], \"null\"))\n          : (state_status = state\n              .set(name, value)\n              .setIn([\"lengthCheck\", name], name));\n      }\n\n      return state_status;\n    },\n\n    [SET_ERROR]: (state, action) => {\n      const { message, overlapPoint } = action.payload;\n      return state.set(\"message\", message).set(\"overlapPoint\", overlapPoint);\n    },\n\n    [LOGIN_SUCCESS]: state => {\n      return state\n        .set(\"message\", \"\")\n        .set(\"overlapPoint\", \"\")\n        .set(\"id\", \"\")\n        .set(\"password\", \"\");\n    },\n\n    [CLEAR_STORE]: state => {\n      return state\n        .set(\"id\", \"\")\n        .set(\"password\", \"\")\n        .set(\"message\", \"\")\n        .set(\"overlapPoint\", \"\");\n    },\n\n    ...pender({\n      type: CHECK_STATUS,\n      onSuccess: (state, action) => {\n        // const { data } = action.payload;\n\n        return;\n      },\n      onFailure: () => {\n        return initialState;\n      }\n    }),\n\n    ...pender({\n      type: USER_LOGOUT,\n      onSuccess: state => {\n        return state\n          .set(\"message\", \"\")\n          .set(\"overlapPoint\", \"\")\n          .set(\"id\", \"\")\n          .set(\"password\", \"\");\n      }\n    }),\n\n    ...pender({\n      type: USER_LOGIN,\n      onSuccess: (state, action) => {\n        const { data: id } = action.payload;\n        const { data: password } = action.payload;\n        return state.set(id).set(password);\n      }\n    }),\n    ...pender({\n      type: USER_THIRD_LOGIN,\n      onSuccess: (state, action) => {\n        const { data: id } = action.payload;\n        const { data: accesstoken } = action.payload;\n        const { data: nickName } = action.payload;\n\n        return state.set(id);\n      }\n    })\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}