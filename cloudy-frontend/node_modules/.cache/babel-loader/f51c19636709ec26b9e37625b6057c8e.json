{"ast":null,"code":"import _classCallCheck from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/src/containers/chatroom/ChatRoomContainer.js\";\nimport React, { Component } from \"react\";\nimport ChatRoom from \"components/chatroom/ChatRoom\";\nimport socketIOClient from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport storage from \"lib/storage\";\nimport * as chatActions from \"store/modules/chat\";\nimport { bindActionCreators } from \"redux\";\nimport ChatRoomMessageInputContainer from \"containers/chatroom/ChatRoomMessageInputContainer\"; // ChatRoomMessageInputContainer과 ChatRoomContainer을\n// 합칠까를 생각했지만 합칠 경우 코드량이 현저하게 많이 늘어날꺼 같고\n// 재사용성에서 불편할꺼 같은 이유로 나눠서 처리하기로함.\n// 이로인해 생길수 있는 문제는 코드를 파악하는데 시간이 오래 걸릴꺼 같다라는 것임.\n// ChatRoomMessageInputContainer에서는 state에 데이터 셋팅하고,\n// ChatRoomContainer state에 있는 데이터를 가져와서 보여주는걸 하는 역할임.\n\nvar socket = \"\";\n\nvar ChatRoomContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatRoomContainer, _Component);\n\n  function ChatRoomContainer() {\n    var _this;\n\n    _classCallCheck(this, ChatRoomContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatRoomContainer).call(this));\n    _this.nickname = storage.get(\"loggedNickname\"); //chatroom으로 사용자가 들어올때만 socket을 만들어준다.\n\n    socket = socketIOClient(\"www.cloudy.ga:4000\");\n    socket.on(\"chat message\", function (msg, userID) {\n      var ChatActions = _this.props.ChatActions;\n      console.log(\"chat message Listen\");\n      ChatActions.listenChatMessage({\n        msg: msg,\n        userID: userID\n      });\n    });\n    return _this;\n  }\n\n  _createClass(ChatRoomContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // 데이터가 변했을때 페이지 상에서 스크롤이 최하단에 위치하도록 셋팅함.\n      var docScrollHeight = document.documentElement.scrollHeight;\n      document.documentElement.scrollTop = docScrollHeight;\n      var _this$props = this.props,\n          match = _this$props.match,\n          ChatActions = _this$props.ChatActions;\n      var urlArray = match.url.split(\"/\");\n      ChatActions.setSocket({\n        socket: socket\n      });\n      socket.emit(\"join room\", urlArray[2], this.nickname);\n      ChatActions.getChatMessageList({\n        roomID: urlArray[2]\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // 데이터가 변했을때 페이지 상에서 스크롤이 최하단에 위치하도록 셋팅함.\n      var docScrollHeight = document.documentElement.scrollHeight;\n      document.documentElement.scrollTop = docScrollHeight;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var history = this.props.history;\n      var loggedNickname = storage.get(\"loggedNickname\");\n\n      if (!loggedNickname) {\n        history.push(\"/access\"); // 로그인 정보가 없다면 여기서 멈춥니다.\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      //chatroom페이지에서 사용자가 벗어나면 기존의 socket을 연결 해지함.\n      socket.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          chatList = _this$props2.chatList,\n          chatMessage = _this$props2.chatMessage;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(ChatRoom, {\n        chatList: chatList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(ChatRoomMessageInputContainer, {\n        socket: socket,\n        chatMessage: chatMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatRoomContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    // socket: state.chat.get(\"socket\"),\n    chatId: state.chat.get(\"chatId\"),\n    chatMessage: state.chat.get(\"chatMessage\"),\n    timestamp: state.chat.get(\"timestamp\"),\n    who_send: state.chat.get(\"who_send\"),\n    chatList: state.chat.get(\"chatList\")\n  };\n}, function (dispatch) {\n  return {\n    ChatActions: bindActionCreators(chatActions, dispatch)\n  };\n})(withRouter(ChatRoomContainer));","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/src/containers/chatroom/ChatRoomContainer.js"],"names":["React","Component","ChatRoom","socketIOClient","connect","withRouter","storage","chatActions","bindActionCreators","ChatRoomMessageInputContainer","socket","ChatRoomContainer","nickname","get","on","msg","userID","ChatActions","props","console","log","listenChatMessage","docScrollHeight","document","documentElement","scrollHeight","scrollTop","match","urlArray","url","split","setSocket","emit","getChatMessageList","roomID","prevProps","prevState","history","loggedNickname","push","disconnect","chatList","chatMessage","state","chatId","chat","timestamp","who_send","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,6BAAP,MAA0C,mDAA1C,C,CAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA,IAAIC,MAAM,GAAG,EAAb;;IAEMC,iB;;;;;AACJ,+BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,QAAL,GAAgBN,OAAO,CAACO,GAAR,CAAY,gBAAZ,CAAhB,CAFY,CAIZ;;AACAH,IAAAA,MAAM,GAAGP,cAAc,CAAC,oBAAD,CAAvB;AACAO,IAAAA,MAAM,CAACI,EAAP,CAAU,cAAV,EAA0B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAAA,UACjCC,WADiC,GACjB,MAAKC,KADY,CACjCD,WADiC;AAEzCE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAH,MAAAA,WAAW,CAACI,iBAAZ,CAA8B;AAAEN,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,MAAM,EAANA;AAAP,OAA9B;AACD,KAJD;AANY;AAWb;;;;yCACoB;AACnB;AACA,UAAMM,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,YAAjD;AACAF,MAAAA,QAAQ,CAACC,eAAT,CAAyBE,SAAzB,GAAqCJ,eAArC;AAHmB,wBAKY,KAAKJ,KALjB;AAAA,UAKXS,KALW,eAKXA,KALW;AAAA,UAKJV,WALI,eAKJA,WALI;AAMnB,UAAMW,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAUC,KAAV,CAAgB,GAAhB,CAAjB;AAEAb,MAAAA,WAAW,CAACc,SAAZ,CAAsB;AAAErB,QAAAA,MAAM,EAANA;AAAF,OAAtB;AAEAA,MAAAA,MAAM,CAACsB,IAAP,CAAY,WAAZ,EAAyBJ,QAAQ,CAAC,CAAD,CAAjC,EAAsC,KAAKhB,QAA3C;AACAK,MAAAA,WAAW,CAACgB,kBAAZ,CAA+B;AAAEC,QAAAA,MAAM,EAAEN,QAAQ,CAAC,CAAD;AAAlB,OAA/B;AACD;;;uCAEkBO,S,EAAWC,S,EAAW;AACvC;AACA,UAAMd,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,YAAjD;AACAF,MAAAA,QAAQ,CAACC,eAAT,CAAyBE,SAAzB,GAAqCJ,eAArC;AACD;;;wCAEmB;AAAA,UACVe,OADU,GACE,KAAKnB,KADP,CACVmB,OADU;AAElB,UAAMC,cAAc,GAAGhC,OAAO,CAACO,GAAR,CAAY,gBAAZ,CAAvB;;AAEA,UAAI,CAACyB,cAAL,EAAqB;AACnBD,QAAAA,OAAO,CAACE,IAAR,CAAa,SAAb,EADmB,CACM;AAC1B;AACF;;;2CAEsB;AACrB;AACA7B,MAAAA,MAAM,CAAC8B,UAAP;AACD;;;6BAEQ;AAAA,yBAC2B,KAAKtB,KADhC;AAAA,UACCuB,QADD,gBACCA,QADD;AAAA,UACWC,WADX,gBACWA,WADX;AAGP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAED,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,6BAAD;AACE,QAAA,MAAM,EAAE/B,MADV;AAEE,QAAA,WAAW,EAAEgC,WAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AASD;;;;EA3D6BzC,S;;AA8DhC,eAAeG,OAAO,CACpB,UAAAuC,KAAK;AAAA,SAAK;AACR;AACAC,IAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWhC,GAAX,CAAe,QAAf,CAFA;AAGR6B,IAAAA,WAAW,EAAEC,KAAK,CAACE,IAAN,CAAWhC,GAAX,CAAe,aAAf,CAHL;AAIRiC,IAAAA,SAAS,EAAEH,KAAK,CAACE,IAAN,CAAWhC,GAAX,CAAe,WAAf,CAJH;AAKRkC,IAAAA,QAAQ,EAAEJ,KAAK,CAACE,IAAN,CAAWhC,GAAX,CAAe,UAAf,CALF;AAMR4B,IAAAA,QAAQ,EAAEE,KAAK,CAACE,IAAN,CAAWhC,GAAX,CAAe,UAAf;AANF,GAAL;AAAA,CADe,EASpB,UAAAmC,QAAQ;AAAA,SAAK;AACX/B,IAAAA,WAAW,EAAET,kBAAkB,CAACD,WAAD,EAAcyC,QAAd;AADpB,GAAL;AAAA,CATY,CAAP,CAYb3C,UAAU,CAACM,iBAAD,CAZG,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ChatRoom from \"components/chatroom/ChatRoom\";\nimport socketIOClient from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport storage from \"lib/storage\";\nimport * as chatActions from \"store/modules/chat\";\nimport { bindActionCreators } from \"redux\";\nimport ChatRoomMessageInputContainer from \"containers/chatroom/ChatRoomMessageInputContainer\";\n\n// ChatRoomMessageInputContainer과 ChatRoomContainer을\n// 합칠까를 생각했지만 합칠 경우 코드량이 현저하게 많이 늘어날꺼 같고\n// 재사용성에서 불편할꺼 같은 이유로 나눠서 처리하기로함.\n// 이로인해 생길수 있는 문제는 코드를 파악하는데 시간이 오래 걸릴꺼 같다라는 것임.\n\n// ChatRoomMessageInputContainer에서는 state에 데이터 셋팅하고,\n// ChatRoomContainer state에 있는 데이터를 가져와서 보여주는걸 하는 역할임.\n\nlet socket = \"\";\n\nclass ChatRoomContainer extends Component {\n  constructor() {\n    super();\n    this.nickname = storage.get(\"loggedNickname\");\n\n    //chatroom으로 사용자가 들어올때만 socket을 만들어준다.\n    socket = socketIOClient(\"www.cloudy.ga:4000\");\n    socket.on(\"chat message\", (msg, userID) => {\n      const { ChatActions } = this.props;\n      console.log(\"chat message Listen\");\n      ChatActions.listenChatMessage({ msg, userID });\n    });\n  }\n  componentWillMount() {\n    // 데이터가 변했을때 페이지 상에서 스크롤이 최하단에 위치하도록 셋팅함.\n    const docScrollHeight = document.documentElement.scrollHeight;\n    document.documentElement.scrollTop = docScrollHeight;\n\n    const { match, ChatActions } = this.props;\n    const urlArray = match.url.split(\"/\");\n\n    ChatActions.setSocket({ socket });\n\n    socket.emit(\"join room\", urlArray[2], this.nickname);\n    ChatActions.getChatMessageList({ roomID: urlArray[2] });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // 데이터가 변했을때 페이지 상에서 스크롤이 최하단에 위치하도록 셋팅함.\n    const docScrollHeight = document.documentElement.scrollHeight;\n    document.documentElement.scrollTop = docScrollHeight;\n  }\n\n  componentDidMount() {\n    const { history } = this.props;\n    const loggedNickname = storage.get(\"loggedNickname\");\n\n    if (!loggedNickname) {\n      history.push(\"/access\"); // 로그인 정보가 없다면 여기서 멈춥니다.\n    }\n  }\n\n  componentWillUnmount() {\n    //chatroom페이지에서 사용자가 벗어나면 기존의 socket을 연결 해지함.\n    socket.disconnect();\n  }\n\n  render() {\n    const { chatList, chatMessage } = this.props;\n\n    return (\n      <div>\n        <ChatRoom chatList={chatList} />\n        <ChatRoomMessageInputContainer\n          socket={socket}\n          chatMessage={chatMessage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    // socket: state.chat.get(\"socket\"),\n    chatId: state.chat.get(\"chatId\"),\n    chatMessage: state.chat.get(\"chatMessage\"),\n    timestamp: state.chat.get(\"timestamp\"),\n    who_send: state.chat.get(\"who_send\"),\n    chatList: state.chat.get(\"chatList\")\n  }),\n  dispatch => ({\n    ChatActions: bindActionCreators(chatActions, dispatch)\n  })\n)(withRouter(ChatRoomContainer));\n"]},"metadata":{},"sourceType":"module"}