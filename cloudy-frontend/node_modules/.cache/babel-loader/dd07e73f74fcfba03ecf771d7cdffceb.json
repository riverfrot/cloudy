{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/common/HeaderContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport storage from \"lib/storage\";\nimport { bindActionCreators } from \"redux\";\nimport * as loginActions from \"store/modules/login\";\nimport * as chatroomActions from \"store/modules/chatroom\";\nimport HeaderComponent from \"components/common/Header\";\nimport { withRouter } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nvar HeaderContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HeaderContainer, _Component);\n\n  function HeaderContainer(props) {\n    var _this;\n\n    _classCallCheck(this, HeaderContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HeaderContainer).call(this, props));\n    _this.initializeUserInfo =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var loggedInfo, LoginActions;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loggedInfo = storage.get(\"loggedNickname\"); // 로그인 정보를 로컬스토리지에서 가져옵니다.\n\n              if (loggedInfo) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              // 로그인 정보가 없다면 여기서 멈춥니다.\n              LoginActions = _this.props.LoginActions;\n              _context.prev = 4;\n              _context.next = 7;\n              return LoginActions.checkStatus();\n\n            case 7:\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](4);\n              storage.remove(\"loggedNickname\");\n              window.location.href = \"/login\";\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[4, 9]]);\n    }));\n\n    _this.handleUserLogout = function () {\n      var LoginActions = _this.props.LoginActions;\n      storage.remove(\"loggedNickname\");\n      LoginActions.userLogout();\n      window.location.href = \"/\";\n    };\n\n    _this.onChangeInput = function (_ref2) {\n      var value = _ref2.value,\n          name = _ref2.name;\n      var ChatRoomActions = _this.props.ChatRoomActions;\n      ChatRoomActions.changeInput({\n        value: value,\n        name: name\n      });\n    };\n\n    _this.handleModalOpen = function () {\n      var ChatRoomActions = _this.props.ChatRoomActions;\n      ChatRoomActions.changeModalOpen();\n    };\n\n    _this.handleModalClose = function () {\n      var ChatRoomActions = _this.props.ChatRoomActions;\n      ChatRoomActions.changeModalClose();\n    };\n\n    _this.handleKeyPress = function (e) {\n      // 엔터 키를 누르면 로그인 호출\n      if (e.key === \"Enter\") {\n        _this.handleSubmit();\n      }\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$props, ChatRoomActions, history, roomID, title;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props = _this.props, ChatRoomActions = _this$props.ChatRoomActions, history = _this$props.history, roomID = _this$props.roomID, title = _this$props.title;\n\n              if (!(title !== \"\")) {\n                _context2.next = 14;\n                break;\n              }\n\n              //채팅방 만드는 모달 닫을때 사용하는 리듀서 함수\n              ChatRoomActions.changeModalClose();\n              _context2.prev = 3;\n              _context2.next = 6;\n              return ChatRoomActions.chatroomRegister({\n                roomID: roomID,\n                title: title\n              });\n\n            case 6:\n              history.push(\"/chatroom/\".concat(_this.props.roomID));\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.log(_context2.t0);\n\n            case 12:\n              _context2.next = 14;\n              break;\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[3, 9]]);\n    }));\n    _this.nickname = storage.get(\"loggedNickname\");\n    return _this;\n  }\n\n  _createClass(HeaderContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initializeUserInfo();\n      this.nickname = storage.get(\"loggedNickname\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var handleUserLogout = this.handleUserLogout,\n          onChangeInput = this.onChangeInput,\n          handleSubmit = this.handleSubmit,\n          handleModalClose = this.handleModalClose,\n          handleModalOpen = this.handleModalOpen,\n          handleKeyPress = this.handleKeyPress;\n      var _this$props2 = this.props,\n          match = _this$props2.match,\n          modalState = _this$props2.modalState;\n      return React.createElement(HeaderComponent, {\n        match: match,\n        nickname: this.nickname,\n        handleUserLogout: handleUserLogout,\n        onChangeInput: onChangeInput,\n        onSubmit: handleSubmit,\n        onModalClose: handleModalClose,\n        onModalOpen: handleModalOpen,\n        onKeyPress: handleKeyPress,\n        modalState: modalState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return HeaderContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    roomID: state.chatroom.get(\"roomID\"),\n    title: state.chatroom.get(\"title\"),\n    createDate: state.chatroom.get(\"createDate\"),\n    modalState: state.chatroom.get(\"modalState\")\n  };\n}, function (dispatch) {\n  return {\n    LoginActions: bindActionCreators(loginActions, dispatch),\n    ChatRoomActions: bindActionCreators(chatroomActions, dispatch)\n  };\n})(withRouter(HeaderContainer));","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/common/HeaderContainer.js"],"names":["React","Component","connect","storage","bindActionCreators","loginActions","chatroomActions","HeaderComponent","withRouter","Helmet","HeaderContainer","props","initializeUserInfo","loggedInfo","get","LoginActions","checkStatus","remove","window","location","href","handleUserLogout","userLogout","onChangeInput","value","name","ChatRoomActions","changeInput","handleModalOpen","changeModalOpen","handleModalClose","changeModalClose","handleKeyPress","e","key","handleSubmit","history","roomID","title","chatroomRegister","push","console","log","nickname","match","modalState","state","chatroom","createDate","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport storage from \"lib/storage\";\nimport { bindActionCreators } from \"redux\";\nimport * as loginActions from \"store/modules/login\";\nimport * as chatroomActions from \"store/modules/chatroom\";\nimport HeaderComponent from \"components/common/Header\";\nimport { withRouter } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nclass HeaderContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.nickname = storage.get(\"loggedNickname\");\n  }\n\n  initializeUserInfo = async () => {\n    const loggedInfo = storage.get(\"loggedNickname\"); // 로그인 정보를 로컬스토리지에서 가져옵니다.\n    if (!loggedInfo) return; // 로그인 정보가 없다면 여기서 멈춥니다.\n\n    const { LoginActions } = this.props;\n\n    try {\n      await LoginActions.checkStatus();\n    } catch (e) {\n      storage.remove(\"loggedNickname\");\n      window.location.href = \"/login\";\n    }\n  };\n\n  componentDidMount() {\n    this.initializeUserInfo();\n    this.nickname = storage.get(\"loggedNickname\");\n  }\n  handleUserLogout = () => {\n    const { LoginActions } = this.props;\n    storage.remove(\"loggedNickname\");\n    LoginActions.userLogout();\n    window.location.href = \"/\";\n  };\n\n  onChangeInput = ({ value, name }) => {\n    const { ChatRoomActions } = this.props;\n    ChatRoomActions.changeInput({ value, name });\n  };\n\n  handleModalOpen = () => {\n    const { ChatRoomActions } = this.props;\n    ChatRoomActions.changeModalOpen();\n  };\n\n  handleModalClose = () => {\n    const { ChatRoomActions } = this.props;\n    ChatRoomActions.changeModalClose();\n  };\n\n  handleKeyPress = e => {\n    // 엔터 키를 누르면 로그인 호출\n    if (e.key === \"Enter\") {\n      this.handleSubmit();\n    }\n  };\n\n  handleSubmit = async () => {\n    const { ChatRoomActions, history, roomID, title } = this.props;\n\n    if (title !== \"\") {\n      //채팅방 만드는 모달 닫을때 사용하는 리듀서 함수\n      ChatRoomActions.changeModalClose();\n\n      try {\n        await ChatRoomActions.chatroomRegister({\n          roomID,\n          title\n        });\n\n        history.push(`/chatroom/${this.props.roomID}`);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n    }\n  };\n\n  render() {\n    const {\n      handleUserLogout,\n      onChangeInput,\n      handleSubmit,\n      handleModalClose,\n      handleModalOpen,\n      handleKeyPress\n    } = this;\n    const { match, modalState } = this.props;\n\n    return (\n      <HeaderComponent\n        match={match}\n        nickname={this.nickname}\n        handleUserLogout={handleUserLogout}\n        onChangeInput={onChangeInput}\n        onSubmit={handleSubmit}\n        onModalClose={handleModalClose}\n        onModalOpen={handleModalOpen}\n        onKeyPress={handleKeyPress}\n        modalState={modalState}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    roomID: state.chatroom.get(\"roomID\"),\n    title: state.chatroom.get(\"title\"),\n    createDate: state.chatroom.get(\"createDate\"),\n    modalState: state.chatroom.get(\"modalState\")\n  }),\n  dispatch => ({\n    LoginActions: bindActionCreators(loginActions, dispatch),\n    ChatRoomActions: bindActionCreators(chatroomActions, dispatch)\n  })\n)(withRouter(HeaderContainer));\n"]},"metadata":{},"sourceType":"module"}