{"ast":null,"code":"import _classCallCheck from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/src/components/editor/EditorComponent/EditorComponent.js\";\nimport React, { Component } from \"react\";\nimport { Editor, EditorState, RichUtils } from \"draft-js\";\nimport { convertToHTML, convertFromHTML } from \"draft-convert\";\nimport { Container, Header, Form } from \"semantic-ui-react\";\nimport styles from \"./EditorComponent.scss\";\nimport storage from \"lib/storage\";\n\nvar EditorComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditorComponent, _Component);\n\n  function EditorComponent(props) {\n    var _this;\n\n    _classCallCheck(this, EditorComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditorComponent).call(this, props));\n    var id = _this.props.id;\n    var html = storage.get(\"temp_body\");\n    !id ? _this.state = {\n      editorState: EditorState.createEmpty()\n    } : _this.state = {\n      editorState: EditorState.createWithContent(convertFromHTML(html))\n    };\n    var onChangeInput = _this.props.onChangeInput;\n\n    _this.focus = function () {\n      return _this.refs.editor.focus();\n    };\n\n    _this.onChange = function (editorState) {\n      var value = convertToHTML(editorState.getCurrentContent());\n      var name = \"body\";\n      onChangeInput({\n        value: value,\n        name: name\n      });\n      return _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.handleKeyCommand = function (command) {\n      return _this._handleKeyCommand(command);\n    };\n\n    _this.onTab = function (e) {\n      return _this._onTab(e);\n    };\n\n    _this.toggleBlockType = function (type) {\n      return _this._toggleBlockType(type);\n    };\n\n    _this.toggleInlineStyle = function (style) {\n      return _this._toggleInlineStyle(style);\n    };\n\n    return _this;\n  }\n\n  _createClass(EditorComponent, [{\n    key: \"_handleKeyCommand\",\n    value: function _handleKeyCommand(command) {\n      var editorState = this.state.editorState;\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_onTab\",\n    value: function _onTab(e) {\n      var maxDepth = 4;\n      this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n    }\n  }, {\n    key: \"_toggleBlockType\",\n    value: function _toggleBlockType(blockType) {\n      this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n    }\n  }, {\n    key: \"_toggleInlineStyle\",\n    value: function _toggleInlineStyle(inlineStyle) {\n      this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var editorState = this.state.editorState;\n      var _this$props = this.props,\n          onChangeInput = _this$props.onChangeInput,\n          title = _this$props.title,\n          tags = _this$props.tags,\n          body = _this$props.body; // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n\n      var className = \"RichEditor-editor\";\n      var contentState = editorState.getCurrentContent();\n\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\n          className += \" RichEditor-hidePlaceholder\";\n        }\n      }\n\n      var handleChange = function handleChange(e) {\n        var _e$target = e.target,\n            value = _e$target.value,\n            name = _e$target.name;\n        onChangeInput({\n          value: value,\n          name: name\n        });\n      };\n\n      return React.createElement(Container, {\n        style: {\n          marginTop: \"7em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h2\",\n        dividing: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"\\uC775\\uBA85 \\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131\"), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"\\uC81C\\uBAA9\"), React.createElement(\"input\", {\n        name: \"title\",\n        placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n        value: title,\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"\\uD0DC\\uADF8\"), React.createElement(\"input\", {\n        name: \"tags\",\n        value: tags,\n        placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694. \\uC27C\\uD45C\\uB85C \\uAD6C\\uBD84\\uD569\\uB2C8\\uB2E4.\",\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"\\uB0B4\\uC6A9\"), React.createElement(\"div\", {\n        className: \"RichEditor-root\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(BlockStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleBlockType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(InlineStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleInlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: className,\n        onClick: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        name: \"body\",\n        blockStyleFn: getBlockStyle,\n        customStyleMap: styleMap,\n        editorState: editorState,\n        handleKeyCommand: this.handleKeyCommand,\n        onChange: this.onChange,\n        onTab: this.onTab,\n        placeholder: \"Tell a story...\",\n        ref: \"editor\",\n        spellCheck: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return EditorComponent;\n}(Component); // Custom overrides for \"code\" style.\n\n\nvar styleMap = {\n  CODE: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case \"blockquote\":\n      return \"RichEditor-blockquote\";\n\n    default:\n      return null;\n  }\n}\n\nvar StyleButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StyleButton, _React$Component);\n\n  function StyleButton() {\n    var _this2;\n\n    _classCallCheck(this, StyleButton);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(StyleButton).call(this));\n\n    _this2.onToggle = function (e) {\n      e.preventDefault();\n\n      _this2.props.onToggle(_this2.props.style);\n    };\n\n    return _this2;\n  }\n\n  _createClass(StyleButton, [{\n    key: \"render\",\n    value: function render() {\n      var className = \"RichEditor-styleButton\";\n\n      if (this.props.active) {\n        className += \" RichEditor-activeButton\";\n      }\n\n      return React.createElement(\"span\", {\n        className: className,\n        onMouseDown: this.onToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, this.props.label);\n    }\n  }]);\n\n  return StyleButton;\n}(React.Component);\n\nvar BLOCK_TYPES = [// { label: \"H1\", style: \"header-one\" },\n// { label: \"H2\", style: \"header-two\" },\n{\n  label: \"H3\",\n  style: \"header-three\"\n}, {\n  label: \"H4\",\n  style: \"header-four\"\n}, {\n  label: \"H5\",\n  style: \"header-five\"\n}, {\n  label: \"H6\",\n  style: \"header-six\"\n}, {\n  label: \"Blockquote\",\n  style: \"blockquote\"\n}, {\n  label: \"UL\",\n  style: \"unordered-list-item\"\n}, {\n  label: \"OL\",\n  style: \"ordered-list-item\"\n}];\n\nvar BlockStyleControls = function BlockStyleControls(props) {\n  var editorState = props.editorState;\n  var selection = editorState.getSelection();\n  var blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, BLOCK_TYPES.map(function (type) {\n    return React.createElement(StyleButton, {\n      key: type.label,\n      active: type.style === blockType,\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    });\n  }));\n};\n\nvar INLINE_STYLES = [{\n  label: \"Bold\",\n  style: \"BOLD\"\n}, {\n  label: \"Italic\",\n  style: \"ITALIC\"\n}, {\n  label: \"Underline\",\n  style: \"UNDERLINE\"\n}, {\n  label: \"Monospace\",\n  style: \"CODE\"\n}];\n\nvar InlineStyleControls = function InlineStyleControls(props) {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, INLINE_STYLES.map(function (type) {\n    return React.createElement(StyleButton, {\n      key: type.label,\n      active: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default EditorComponent;","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/src/components/editor/EditorComponent/EditorComponent.js"],"names":["React","Component","Editor","EditorState","RichUtils","convertToHTML","convertFromHTML","Container","Header","Form","styles","storage","EditorComponent","props","id","html","get","state","editorState","createEmpty","createWithContent","onChangeInput","focus","refs","editor","onChange","value","getCurrentContent","name","setState","handleKeyCommand","command","_handleKeyCommand","onTab","e","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","style","_toggleInlineStyle","newState","maxDepth","blockType","inlineStyle","title","tags","body","className","contentState","hasText","getBlockMap","first","getType","handleChange","target","marginTop","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Editor, EditorState, RichUtils } from \"draft-js\";\nimport { convertToHTML, convertFromHTML } from \"draft-convert\";\nimport { Container, Header, Form } from \"semantic-ui-react\";\nimport styles from \"./EditorComponent.scss\";\nimport storage from \"lib/storage\";\n\nclass EditorComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    const { id } = this.props;\n    const html = storage.get(\"temp_body\");\n\n    !id\n      ? (this.state = { editorState: EditorState.createEmpty() })\n      : (this.state = {\n          editorState: EditorState.createWithContent(convertFromHTML(html))\n        });\n\n    const { onChangeInput } = this.props;\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = editorState => {\n      const value = convertToHTML(editorState.getCurrentContent());\n      const name = \"body\";\n      onChangeInput({ value, name });\n      return this.setState({ editorState });\n    };\n\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n    this.onTab = e => this._onTab(e);\n    this.toggleBlockType = type => this._toggleBlockType(type);\n    this.toggleInlineStyle = style => this._toggleInlineStyle(style);\n  }\n\n  _handleKeyCommand(command) {\n    const { editorState } = this.state;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\n    );\n  }\n\n  render() {\n    const { editorState } = this.state;\n    const { onChangeInput, title, tags, body } = this.props;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = \"RichEditor-editor\";\n    const contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (\n        contentState\n          .getBlockMap()\n          .first()\n          .getType() !== \"unstyled\"\n      ) {\n        className += \" RichEditor-hidePlaceholder\";\n      }\n    }\n\n    const handleChange = e => {\n      const { value, name } = e.target;\n      onChangeInput({ value, name });\n    };\n    return (\n      <Container style={{ marginTop: \"7em\" }}>\n        <Header as=\"h2\" dividing>\n          익명 게시글 작성\n        </Header>\n\n        <Form>\n          <br />\n          <Form.Field>\n            <label>제목</label>\n            <input\n              name=\"title\"\n              placeholder=\"제목을 입력하세요.\"\n              value={title}\n              onChange={handleChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>태그</label>\n            <input\n              name=\"tags\"\n              value={tags}\n              placeholder=\"태그를 입력하세요. 쉼표로 구분합니다.\"\n              onChange={handleChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>내용</label>\n            <div className=\"RichEditor-root\">\n              <BlockStyleControls\n                editorState={editorState}\n                onToggle={this.toggleBlockType}\n              />\n              <InlineStyleControls\n                editorState={editorState}\n                onToggle={this.toggleInlineStyle}\n              />\n              <div className={className} onClick={this.focus}>\n                <Editor\n                  name=\"body\"\n                  blockStyleFn={getBlockStyle}\n                  customStyleMap={styleMap}\n                  editorState={editorState}\n                  handleKeyCommand={this.handleKeyCommand}\n                  onChange={this.onChange}\n                  onTab={this.onTab}\n                  placeholder=\"Tell a story...\"\n                  ref=\"editor\"\n                  spellCheck={true}\n                />\n              </div>\n            </div>\n          </Form.Field>\n        </Form>\n      </Container>\n    );\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case \"blockquote\":\n      return \"RichEditor-blockquote\";\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = \"RichEditor-styleButton\";\n    if (this.props.active) {\n      className += \" RichEditor-activeButton\";\n    }\n\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nconst BLOCK_TYPES = [\n  // { label: \"H1\", style: \"header-one\" },\n  // { label: \"H2\", style: \"header-two\" },\n  { label: \"H3\", style: \"header-three\" },\n  { label: \"H4\", style: \"header-four\" },\n  { label: \"H5\", style: \"header-five\" },\n  { label: \"H6\", style: \"header-six\" },\n  { label: \"Blockquote\", style: \"blockquote\" },\n  { label: \"UL\", style: \"unordered-list-item\" },\n  { label: \"OL\", style: \"ordered-list-item\" }\n];\n\nconst BlockStyleControls = props => {\n  const { editorState } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\" },\n  { label: \"Italic\", style: \"ITALIC\" },\n  { label: \"Underline\", style: \"UNDERLINE\" },\n  { label: \"Monospace\", style: \"CODE\" }\n];\n\nconst InlineStyleControls = props => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map(type => (\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default EditorComponent;\n"]},"metadata":{},"sourceType":"module"}