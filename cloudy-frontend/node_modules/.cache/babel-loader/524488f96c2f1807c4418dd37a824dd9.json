{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/editor/EditorHeaderContainer.js\";\nimport React, { Component } from \"react\";\nimport EditorComponentHeader from \"components/editor/EditorComponentHeader\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport * as editorActions from \"store/modules/editor\";\nimport * as commonActions from \"store/modules/common\";\nimport storage from \"lib/storage\";\nimport queryString from \"query-string\";\nimport { Helmet } from \"react-helmet\";\n\nvar EditorHeaderContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditorHeaderContainer, _Component);\n\n  function EditorHeaderContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditorHeaderContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditorHeaderContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.handleSubmit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, EditorActions, history, title, body, tags, publisher, location, post, _queryString$parse, id;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, EditorActions = _this$props.EditorActions, history = _this$props.history, title = _this$props.title, body = _this$props.body, tags = _this$props.tags, publisher = _this$props.publisher, location = _this$props.location;\n              post = {\n                title: title,\n                body: body,\n                publisher: publisher,\n                // 태그 텍스트를 ,로 분리시키고 앞뒤 공백을 지운 후 중복되는 값은 제거 합니다.\n                tags: tags === \"\" ? [] : _toConsumableArray(new Set(tags.split(\",\").map(function (tag) {\n                  return tag.trim();\n                })))\n              };\n              _context.prev = 2;\n              // id가 존재하면 editPost 호출\n              _queryString$parse = queryString.parse(location.search), id = _queryString$parse.id;\n\n              if (!id) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return EditorActions.editPost(_objectSpread({\n                id: id\n              }, post));\n\n            case 7:\n              history.push(\"/post/\".concat(id));\n              return _context.abrupt(\"return\");\n\n            case 9:\n              _context.next = 11;\n              return EditorActions.writePost(post);\n\n            case 11:\n              history.push(\"/post/\".concat(_this.props.postId));\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[2, 14]]);\n    }));\n    _this.initialize =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$props2, history, EditorActions, location, _queryString$parse2, id, loggedNickname;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props2 = _this.props, history = _this$props2.history, EditorActions = _this$props2.EditorActions, location = _this$props2.location;\n              _queryString$parse2 = queryString.parse(location.search), id = _queryString$parse2.id;\n              loggedNickname = storage.get(\"loggedNickname\");\n\n              if (!loggedNickname) {\n                history.push(\"/access\"); // 로그인 정보가 없다면 여기서 멈춥니다.\n              }\n\n              EditorActions.initialize(); // 에디터를 초기화 합니다.\n\n              EditorActions.setPublisher();\n              _context2.prev = 6;\n\n              if (!id) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 10;\n              return EditorActions.getPost(id);\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](6);\n              console.log(_context2.t0);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[6, 12]]);\n    }));\n    return _this;\n  }\n\n  _createClass(EditorHeaderContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initialize();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var handleSubmit = this.handleSubmit;\n      var location = this.props.location;\n\n      var _queryString$parse3 = queryString.parse(location.search),\n          id = _queryString$parse3.id;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Helmet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Cloudy - \\uC5D0\\uB514\\uD130\")), React.createElement(EditorComponentHeader, {\n        onSubmit: handleSubmit,\n        id: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditorHeaderContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    title: state.editor.get(\"title\"),\n    body: state.editor.get(\"body\"),\n    tags: state.editor.get(\"tags\"),\n    postId: state.editor.get(\"postId\"),\n    publisher: state.editor.get(\"publisher\"),\n    isPublisher: state.common.get(\"isPublisher\")\n  };\n}, function (dispatch) {\n  return {\n    EditorActions: bindActionCreators(editorActions, dispatch),\n    CommonActions: bindActionCreators(commonActions, dispatch)\n  };\n})(withRouter(EditorHeaderContainer));","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/editor/EditorHeaderContainer.js"],"names":["React","Component","EditorComponentHeader","connect","withRouter","bindActionCreators","editorActions","commonActions","storage","queryString","Helmet","EditorHeaderContainer","handleSubmit","props","EditorActions","history","title","body","tags","publisher","location","post","Set","split","map","tag","trim","parse","search","id","editPost","push","writePost","postId","console","log","initialize","loggedNickname","get","setPublisher","getPost","state","editor","isPublisher","common","dispatch","CommonActions"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport EditorComponentHeader from \"components/editor/EditorComponentHeader\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport * as editorActions from \"store/modules/editor\";\nimport * as commonActions from \"store/modules/common\";\nimport storage from \"lib/storage\";\nimport queryString from \"query-string\";\nimport { Helmet } from \"react-helmet\";\n\nclass EditorHeaderContainer extends Component {\n  handleSubmit = async () => {\n    const {\n      EditorActions,\n      history,\n      title,\n      body,\n      tags,\n      publisher,\n      location\n    } = this.props;\n\n    const post = {\n      title,\n      body,\n      publisher,\n      // 태그 텍스트를 ,로 분리시키고 앞뒤 공백을 지운 후 중복되는 값은 제거 합니다.\n      tags:\n        tags === \"\" ? [] : [...new Set(tags.split(\",\").map(tag => tag.trim()))]\n    };\n    try {\n      // id가 존재하면 editPost 호출\n      const { id } = queryString.parse(location.search);\n      if (id) {\n        await EditorActions.editPost({ id, ...post });\n        history.push(`/post/${id}`);\n        return;\n      }\n      await EditorActions.writePost(post);\n      history.push(`/post/${this.props.postId}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  initialize = async () => {\n    const { history, EditorActions, location } = this.props;\n    const { id } = queryString.parse(location.search);\n    const loggedNickname = storage.get(\"loggedNickname\");\n\n    if (!loggedNickname) {\n      history.push(\"/access\"); // 로그인 정보가 없다면 여기서 멈춥니다.\n    }\n\n    EditorActions.initialize(); // 에디터를 초기화 합니다.\n    EditorActions.setPublisher();\n\n    try {\n      if (id) {\n        // id가 존재 하면 포스트 불러오기\n        await EditorActions.getPost(id);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  componentDidMount() {\n    this.initialize();\n  }\n  render() {\n    const { handleSubmit } = this;\n    const { location } = this.props;\n    const { id } = queryString.parse(location.search);\n\n    return (\n      <div>\n        <Helmet>\n          <title>Cloudy - 에디터</title>\n        </Helmet>\n\n        <EditorComponentHeader onSubmit={handleSubmit} id={id} />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    title: state.editor.get(\"title\"),\n    body: state.editor.get(\"body\"),\n    tags: state.editor.get(\"tags\"),\n    postId: state.editor.get(\"postId\"),\n    publisher: state.editor.get(\"publisher\"),\n    isPublisher: state.common.get(\"isPublisher\")\n  }),\n  dispatch => ({\n    EditorActions: bindActionCreators(editorActions, dispatch),\n    CommonActions: bindActionCreators(commonActions, dispatch)\n  })\n)(withRouter(EditorHeaderContainer));\n"]},"metadata":{},"sourceType":"module"}