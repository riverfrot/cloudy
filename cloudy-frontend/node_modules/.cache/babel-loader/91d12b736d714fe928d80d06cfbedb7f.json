{"ast":null,"code":"import _defineProperty from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport storage from \"lib/storage\"; // action Types\n\nvar INTIALIZE = \"common/INTIALIZE\";\nvar CHECK_PUBLISHER = \"common/CHECK_PUBLISHER\"; // action Creators\n\nexport var initialize = createAction(INTIALIZE);\nexport var checkPublisher = createAction(CHECK_PUBLISHER); // initail state\n\nvar initialState = Map({\n  isPublisher: false\n}); // reducer\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, INTIALIZE, function () {\n  return initialState;\n}), _defineProperty(_handleActions, CHECK_PUBLISHER, function (state, action) {\n  var _action$payload = action.payload,\n      publisher = _action$payload.publisher,\n      body = _action$payload.body;\n  var loggedNickname = storage.get(\"loggedNickname\"); // 로그인 정보를 로컬스토리지에서 가져옵니다.\n\n  storage.set(\"temp_body\", body);\n  var isPublisher = false;\n  publisher === loggedNickname ? isPublisher = true : isPublisher = false;\n  return state.set(\"isPublisher\", isPublisher);\n}), _handleActions), initialState);","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/src/store/modules/common.js"],"names":["createAction","handleActions","Map","storage","INTIALIZE","CHECK_PUBLISHER","initialize","checkPublisher","initialState","isPublisher","state","action","payload","publisher","body","loggedNickname","get","set"],"mappings":";;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,aAApB,C,CAEA;;AACA,IAAMC,SAAS,GAAG,kBAAlB;AACA,IAAMC,eAAe,GAAG,wBAAxB,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAGN,YAAY,CAACI,SAAD,CAA/B;AACP,OAAO,IAAMG,cAAc,GAAGP,YAAY,CAACK,eAAD,CAAnC,C,CAEP;;AACA,IAAMG,YAAY,GAAGN,GAAG,CAAC;AACvBO,EAAAA,WAAW,EAAE;AADU,CAAD,CAAxB,C,CAIA;;AACA,eAAeR,aAAa,uDAEvBG,SAFuB,EAEX;AAAA,SAAMI,YAAN;AAAA,CAFW,mCAGvBH,eAHuB,EAGL,UAACK,KAAD,EAAQC,MAAR,EAAmB;AAAA,wBACRA,MAAM,CAACC,OADC;AAAA,MAC5BC,SAD4B,mBAC5BA,SAD4B;AAAA,MACjBC,IADiB,mBACjBA,IADiB;AAGpC,MAAMC,cAAc,GAAGZ,OAAO,CAACa,GAAR,CAAY,gBAAZ,CAAvB,CAHoC,CAGkB;;AACtDb,EAAAA,OAAO,CAACc,GAAR,CAAY,WAAZ,EAAyBH,IAAzB;AAEA,MAAIL,WAAW,GAAG,KAAlB;AACAI,EAAAA,SAAS,KAAKE,cAAd,GACKN,WAAW,GAAG,IADnB,GAEKA,WAAW,GAAG,KAFnB;AAGA,SAAOC,KAAK,CAACO,GAAN,CAAU,aAAV,EAAyBR,WAAzB,CAAP;AACD,CAduB,oBAgB1BD,YAhB0B,CAA5B","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport storage from \"lib/storage\";\n\n// action Types\nconst INTIALIZE = \"common/INTIALIZE\";\nconst CHECK_PUBLISHER = \"common/CHECK_PUBLISHER\";\n\n// action Creators\nexport const initialize = createAction(INTIALIZE);\nexport const checkPublisher = createAction(CHECK_PUBLISHER);\n\n// initail state\nconst initialState = Map({\n  isPublisher: false\n});\n\n// reducer\nexport default handleActions(\n  {\n    [INTIALIZE]: () => initialState,\n    [CHECK_PUBLISHER]: (state, action) => {\n      const { publisher, body } = action.payload;\n\n      const loggedNickname = storage.get(\"loggedNickname\"); // 로그인 정보를 로컬스토리지에서 가져옵니다.\n      storage.set(\"temp_body\", body);\n\n      let isPublisher = false;\n      publisher === loggedNickname\n        ? (isPublisher = true)\n        : (isPublisher = false);\n      return state.set(\"isPublisher\", isPublisher);\n    }\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}