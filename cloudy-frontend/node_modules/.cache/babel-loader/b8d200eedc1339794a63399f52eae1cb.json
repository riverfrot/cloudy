{"ast":null,"code":"import _classCallCheck from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/list/ChatRoomListContainer.js\";\nimport React, { Component } from \"react\";\nimport ChatRoomList from \"components/list/ChatRoomList\";\nimport { connect } from \"react-redux\";\nimport * as listActions from \"store/modules/list\";\nimport { bindActionCreators } from \"redux\";\nimport LoadingView from \"components/common/LoadingView\";\n\nvar ChatRoomListContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatRoomListContainer, _Component);\n\n  function ChatRoomListContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatRoomListContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatRoomListContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getChatRoomList = function () {\n      //페이지와 태그 값을 부모에게서 받아 옵니다.\n      var _this$props = _this.props,\n          tag = _this$props.tag,\n          page = _this$props.page,\n          ListActions = _this$props.ListActions;\n      ListActions.getCharRoomList({\n        page: page,\n        tag: tag\n      });\n    };\n\n    _this.handleScroll = function () {\n      var _this$props2 = _this.props,\n          isLoading = _this$props2.isLoading,\n          isLast = _this$props2.isLast,\n          ListActions = _this$props2.ListActions,\n          chatrooms = _this$props2.chatrooms;\n      var _window = window,\n          innerHeight = _window.innerHeight;\n      var scrollHeight = document.body.scrollHeight;\n      var temp_isLoading = isLoading;\n      var scrollTop = document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;\n\n      if (scrollHeight - innerHeight - scrollTop < 100) {\n        if (!isLoading && !isLast) {\n          ListActions.setLoading();\n          temp_isLoading = true;\n          setTimeout(function () {\n            if (temp_isLoading === true) {\n              var nextPage = chatrooms.toJS().length / 16 + 1;\n              ListActions.getCharRoomList({\n                page: nextPage,\n                next: 1\n              });\n              ListActions.initLoading();\n              temp_isLoading = false;\n            }\n          }, 2000);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatRoomListContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getChatRoomList(); // 스크롤링 이벤트 추가\n\n      window.addEventListener(\"scroll\", this.handleScroll);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // 언마운트 될때에, 스크롤링 이벤트 제거\n      window.removeEventListener(\"scroll\", this.handleScroll);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          chatrooms = _this$props3.chatrooms,\n          isLoading = _this$props3.isLoading;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(ChatRoomList, {\n        chatrooms: chatrooms,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(LoadingView, {\n        isLoading: isLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatRoomListContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    lastPage: state.list.get(\"lastPage\"),\n    chatrooms: state.list.get(\"chatrooms\"),\n    isLast: state.list.get(\"isLast\"),\n    isLoading: state.list.get(\"isLoading\")\n  };\n}, function (dispatch) {\n  return {\n    ListActions: bindActionCreators(listActions, dispatch)\n  };\n})(ChatRoomListContainer);","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/list/ChatRoomListContainer.js"],"names":["React","Component","ChatRoomList","connect","listActions","bindActionCreators","LoadingView","ChatRoomListContainer","getChatRoomList","props","tag","page","ListActions","getCharRoomList","handleScroll","isLoading","isLast","chatrooms","window","innerHeight","scrollHeight","document","body","temp_isLoading","scrollTop","documentElement","setLoading","setTimeout","nextPage","toJS","length","next","initLoading","addEventListener","removeEventListener","state","lastPage","list","get","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ChatRoomList from \"components/list/ChatRoomList\";\nimport { connect } from \"react-redux\";\nimport * as listActions from \"store/modules/list\";\nimport { bindActionCreators } from \"redux\";\nimport LoadingView from \"components/common/LoadingView\";\n\nclass ChatRoomListContainer extends Component {\n  getChatRoomList = () => {\n    //페이지와 태그 값을 부모에게서 받아 옵니다.\n    const { tag, page, ListActions } = this.props;\n    ListActions.getCharRoomList({\n      page,\n      tag\n    });\n  };\n\n  handleScroll = () => {\n    const { isLoading, isLast, ListActions, chatrooms } = this.props;\n    const { innerHeight } = window;\n    const { scrollHeight } = document.body;\n    let temp_isLoading = isLoading;\n    const scrollTop =\n      (document.documentElement && document.documentElement.scrollTop) ||\n      document.body.scrollTop;\n\n    if (scrollHeight - innerHeight - scrollTop < 100) {\n      if (!isLoading && !isLast) {\n        ListActions.setLoading();\n        temp_isLoading = true;\n        setTimeout(function() {\n          if (temp_isLoading === true) {\n            const nextPage = chatrooms.toJS().length / 16 + 1;\n            ListActions.getCharRoomList({ page: nextPage, next: 1 });\n            ListActions.initLoading();\n            temp_isLoading = false;\n          }\n        }, 2000);\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.getChatRoomList();\n    // 스크롤링 이벤트 추가\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    // 언마운트 될때에, 스크롤링 이벤트 제거\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  render() {\n    const { chatrooms, isLoading } = this.props;\n\n    return (\n      <div>\n        <ChatRoomList chatrooms={chatrooms} />\n        <LoadingView isLoading={isLoading} />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    lastPage: state.list.get(\"lastPage\"),\n    chatrooms: state.list.get(\"chatrooms\"),\n    isLast: state.list.get(\"isLast\"),\n    isLoading: state.list.get(\"isLoading\")\n  }),\n  dispatch => ({\n    ListActions: bindActionCreators(listActions, dispatch)\n  })\n)(ChatRoomListContainer);\n"]},"metadata":{},"sourceType":"module"}