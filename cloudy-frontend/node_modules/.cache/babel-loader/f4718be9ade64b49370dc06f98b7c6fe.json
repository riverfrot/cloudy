{"ast":null,"code":"import _defineProperty from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _objectSpread2;\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport { pender } from \"redux-pender\";\nimport storage from \"lib/storage\";\nimport * as api from \"lib/api\"; // 액션 타입 미리 설정하기\n// 에디터 영역에서 어떠한 액션들이 처리될지 미리 타입들을 지정함.\n\nvar WRITE_POST = \"editor/WRITE_POST\";\nvar GET_POST = \"editor/GET_POST\";\nvar CHANGE_INPUT = \"editor/CHANGE_INPUT\";\nvar SET_PUBLISHER = \"editor/SET_PUBLISHER\";\nvar INITIALIZE = \"editor/INITIALIZE\";\nvar EDIT_POST = \"editor/EDIT_POST\";\nvar CHANGE_MODAL_OPEN = \"editor/CHANGE_MODAL_OPEN\";\nvar CHANGE_MODAL_CLOSE = \"editor/CHANGE_MODAL_CLOSE\"; // 에디터 관련 액션 생성자 만드는 부분\n\nexport var writePost = createAction(WRITE_POST, api.writePost);\nexport var editPost = createAction(EDIT_POST, api.editPost);\nexport var getPost = createAction(GET_POST, api.getPost);\nexport var initialize = createAction(INITIALIZE);\nexport var changeInput = createAction(CHANGE_INPUT);\nexport var setPublisher = createAction(SET_PUBLISHER);\nexport var changeModalOpen = createAction(CHANGE_MODAL_OPEN);\nexport var changeModalClose = createAction(CHANGE_MODAL_CLOSE); // 초기 state 스토어에 등록할 에디터 데이터들\n\nvar initialState = Map({\n  title: \"\",\n  body: \"\",\n  tags: \"\",\n  publisher: \"\",\n  postId: null,\n  modalState: false\n}); // 리듀서\n// 에디터에 관한 액션에 대한 처리를 담당하는 부분\n\nexport default handleActions(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, INITIALIZE, function () {\n  return initialState;\n}), _defineProperty(_objectSpread2, CHANGE_INPUT, function (state, action) {\n  var _action$payload = action.payload,\n      value = _action$payload.value,\n      name = _action$payload.name;\n  console.log(action.payload);\n  return state.set(name, value);\n}), _defineProperty(_objectSpread2, CHANGE_MODAL_OPEN, function (state) {\n  return state.set(\"modalState\", true);\n}), _defineProperty(_objectSpread2, CHANGE_MODAL_CLOSE, function (state) {\n  return state.set(\"modalState\", false);\n}), _defineProperty(_objectSpread2, SET_PUBLISHER, function (state) {\n  var publisher = storage.get(\"loggedNickname\");\n  console.log(\"aaa\" + storage.get(\"loggedNickname\"));\n  return state.set(\"publisher\", publisher);\n}), _objectSpread2), pender({\n  type: WRITE_POST,\n  onSuccess: function onSuccess(state, action) {\n    var _id = action.payload.data._id;\n    return state.set(\"postId\", _id);\n  }\n}), pender({\n  type: GET_POST,\n  onSuccess: function onSuccess(state, action) {\n    var _action$payload$data = action.payload.data,\n        title = _action$payload$data.title,\n        tags = _action$payload$data.tags,\n        body = _action$payload$data.body;\n    console.log(body);\n    return state.set(\"title\", title).set(\"body\", body).set(\"tags\", tags.join(\",\")); //배열 -> ,로 구분된 문자열\n  }\n})), initialState);","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/cloudy/cloudy-frontend/src/store/modules/editor.js"],"names":["createAction","handleActions","Map","pender","storage","api","WRITE_POST","GET_POST","CHANGE_INPUT","SET_PUBLISHER","INITIALIZE","EDIT_POST","CHANGE_MODAL_OPEN","CHANGE_MODAL_CLOSE","writePost","editPost","getPost","initialize","changeInput","setPublisher","changeModalOpen","changeModalClose","initialState","title","body","tags","publisher","postId","modalState","state","action","payload","value","name","console","log","set","get","type","onSuccess","_id","data","join"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\nimport { pender } from \"redux-pender\";\nimport storage from \"lib/storage\";\nimport * as api from \"lib/api\";\n\n// 액션 타입 미리 설정하기\n// 에디터 영역에서 어떠한 액션들이 처리될지 미리 타입들을 지정함.\nconst WRITE_POST = \"editor/WRITE_POST\";\nconst GET_POST = \"editor/GET_POST\";\nconst CHANGE_INPUT = \"editor/CHANGE_INPUT\";\nconst SET_PUBLISHER = \"editor/SET_PUBLISHER\";\nconst INITIALIZE = \"editor/INITIALIZE\";\nconst EDIT_POST = \"editor/EDIT_POST\";\nconst CHANGE_MODAL_OPEN = \"editor/CHANGE_MODAL_OPEN\";\nconst CHANGE_MODAL_CLOSE = \"editor/CHANGE_MODAL_CLOSE\";\n\n// 에디터 관련 액션 생성자 만드는 부분\nexport const writePost = createAction(WRITE_POST, api.writePost);\nexport const editPost = createAction(EDIT_POST, api.editPost);\nexport const getPost = createAction(GET_POST, api.getPost);\nexport const initialize = createAction(INITIALIZE);\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const setPublisher = createAction(SET_PUBLISHER);\nexport const changeModalOpen = createAction(CHANGE_MODAL_OPEN);\nexport const changeModalClose = createAction(CHANGE_MODAL_CLOSE);\n\n// 초기 state 스토어에 등록할 에디터 데이터들\nconst initialState = Map({\n  title: \"\",\n  body: \"\",\n  tags: \"\",\n  publisher: \"\",\n  postId: null,\n  modalState: false\n});\n\n// 리듀서\n// 에디터에 관한 액션에 대한 처리를 담당하는 부분\nexport default handleActions(\n  {\n    [INITIALIZE]: () => initialState,\n    [CHANGE_INPUT]: (state, action) => {\n      const { value, name } = action.payload;\n      console.log(action.payload);\n      return state.set(name, value);\n    },\n    [CHANGE_MODAL_OPEN]: state => {\n      return state.set(\"modalState\", true);\n    },\n\n    [CHANGE_MODAL_CLOSE]: state => {\n      return state.set(\"modalState\", false);\n    },\n    [SET_PUBLISHER]: state => {\n      const publisher = storage.get(\"loggedNickname\");\n      console.log(\"aaa\" + storage.get(\"loggedNickname\"));\n      return state.set(\"publisher\", publisher);\n    },\n    ...pender({\n      type: WRITE_POST,\n      onSuccess: (state, action) => {\n        const { _id } = action.payload.data;\n        return state.set(\"postId\", _id);\n      }\n    }),\n\n    ...pender({\n      type: GET_POST,\n      onSuccess: (state, action) => {\n        const { title, tags, body } = action.payload.data;\n        console.log(body);\n        return state\n          .set(\"title\", title)\n          .set(\"body\", body)\n          .set(\"tags\", tags.join(\",\")); //배열 -> ,로 구분된 문자열\n      }\n    })\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}