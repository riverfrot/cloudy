{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/register/RegisterFormContainer.js\";\nimport React, { Component } from \"react\";\nimport RegisterForm from \"components/register/RegisterForm/RegisterForm\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as registerActions from \"store/modules/register\";\nimport { withRouter } from \"react-router-dom\";\n\nvar RegisterFormContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegisterFormContainer, _Component);\n\n  function RegisterFormContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegisterFormContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegisterFormContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.handleSubmit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, id, password, nickname, history, RegisterActions, overlapPoint, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, id = _this$props.id, password = _this$props.password, nickname = _this$props.nickname, history = _this$props.history, RegisterActions = _this$props.RegisterActions;\n              _context.prev = 1;\n              _context.next = 4;\n              return RegisterActions.userRegister({\n                id: id,\n                password: password,\n                nickname: nickname\n              });\n\n            case 4:\n              history.push(\"/login\");\n              RegisterActions.registerSuccess();\n              _context.next = 15;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n              if (!(_context.t0.response.status === 409)) {\n                _context.next = 15;\n                break;\n              }\n\n              overlapPoint = _context.t0.response.data.overlapPoint;\n              message = overlapPoint === \"id\" ? \"이미 존재하는 아이디입니다.\" : \"이미 존재하는 닉네임입니다.\";\n              return _context.abrupt(\"return\", _this.setError(overlapPoint, message));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[1, 8]]);\n    }));\n\n    _this.setError = function (overlapPoint, message) {\n      var RegisterActions = _this.props.RegisterActions;\n      RegisterActions.setError({\n        overlapPoint: overlapPoint,\n        message: message\n      });\n      return false;\n    };\n\n    _this.onChangeInput = function (_ref2) {\n      var value = _ref2.value,\n          name = _ref2.name;\n      var RegisterActions = _this.props.RegisterActions;\n\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          handleValidateConfirmPassword = _assertThisInitialize.handleValidateConfirmPassword;\n\n      RegisterActions.changeInput({\n        value: value,\n        name: name\n      });\n\n      if (name === \"passwordCheck\") {\n        handleValidateConfirmPassword({\n          value: value\n        });\n      }\n    };\n\n    _this.handleValidateConfirmPassword = function (_ref3) {\n      var value = _ref3.value;\n      var _this$props2 = _this.props,\n          RegisterActions = _this$props2.RegisterActions,\n          password = _this$props2.password;\n      var passwordCheck = value;\n      RegisterActions.checkPasswordEqual({\n        password: password,\n        passwordCheck: passwordCheck\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RegisterFormContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var RegisterActions = this.props.RegisterActions;\n      RegisterActions.initialize();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var handleSubmit = this.handleSubmit,\n          onChangeInput = this.onChangeInput,\n          handleValidateConfirmPassword = this.handleValidateConfirmPassword;\n      var _this$props3 = this.props,\n          message = _this$props3.message,\n          overlapPoint = _this$props3.overlapPoint,\n          lengthCheckID = _this$props3.lengthCheckID,\n          lengthCheckPassword = _this$props3.lengthCheckPassword,\n          lengthCheckPasswordCheck = _this$props3.lengthCheckPasswordCheck,\n          lengthCheckNickname = _this$props3.lengthCheckNickname,\n          passwordEqual = _this$props3.passwordEqual;\n      return React.createElement(RegisterForm, {\n        handleValidateConfirmPassword: handleValidateConfirmPassword,\n        onChangeInput: onChangeInput,\n        handleSubmit: handleSubmit,\n        message: message,\n        overlapPoint: overlapPoint,\n        passwordEqual: passwordEqual,\n        lengthCheckID: lengthCheckID,\n        lengthCheckPassword: lengthCheckPassword,\n        lengthCheckPasswordCheck: lengthCheckPasswordCheck,\n        lengthCheckNickname: lengthCheckNickname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RegisterFormContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    id: state.register.get(\"id\"),\n    password: state.register.get(\"password\"),\n    passwordCheck: state.register.get(\"passwordCheck\"),\n    nickname: state.register.get(\"nickname\"),\n    message: state.register.get(\"message\"),\n    overlapPoint: state.register.get(\"overlapPoint\"),\n    passwordEqual: state.register.get(\"passwordEqual\"),\n    lengthCheckID: state.register.getIn([\"lengthCheck\", \"id\"]),\n    lengthCheckPassword: state.register.getIn([\"lengthCheck\", \"password\"]),\n    lengthCheckPasswordCheck: state.register.getIn([\"lengthCheck\", \"passwordCheck\"]),\n    lengthCheckNickname: state.register.getIn([\"lengthCheck\", \"nickname\"])\n  };\n}, function (dispatch) {\n  return {\n    RegisterActions: bindActionCreators(registerActions, dispatch)\n  };\n})(withRouter(RegisterFormContainer)); // export default RegisterFormContainer;","map":{"version":3,"sources":["/Users/jeongdonghun/React_Project/snapchat/snapchat-frontend/src/containers/register/RegisterFormContainer.js"],"names":["React","Component","RegisterForm","connect","bindActionCreators","registerActions","withRouter","RegisterFormContainer","handleSubmit","props","id","password","nickname","history","RegisterActions","userRegister","push","registerSuccess","console","log","response","status","overlapPoint","data","message","setError","onChangeInput","value","name","handleValidateConfirmPassword","changeInput","passwordCheck","checkPasswordEqual","initialize","lengthCheckID","lengthCheckPassword","lengthCheckPasswordCheck","lengthCheckNickname","passwordEqual","state","register","get","getIn","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport RegisterForm from \"components/register/RegisterForm/RegisterForm\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as registerActions from \"store/modules/register\";\nimport { withRouter } from \"react-router-dom\";\n\nclass RegisterFormContainer extends Component {\n  handleSubmit = async () => {\n    const { id, password, nickname, history, RegisterActions } = this.props;\n\n    try {\n      // 회원 등록 하는 부분.\n      await RegisterActions.userRegister({\n        id,\n        password,\n        nickname\n      });\n      history.push(\"/login\");\n      RegisterActions.registerSuccess();\n    } catch (e) {\n      console.log(e);\n      if (e.response.status === 409) {\n        const { overlapPoint } = e.response.data;\n        const message =\n          overlapPoint === \"id\"\n            ? \"이미 존재하는 아이디입니다.\"\n            : \"이미 존재하는 닉네임입니다.\";\n        return this.setError(overlapPoint, message);\n      }\n    }\n  };\n\n  setError = (overlapPoint, message) => {\n    const { RegisterActions } = this.props;\n    RegisterActions.setError({ overlapPoint, message });\n    return false;\n  };\n\n  onChangeInput = ({ value, name }) => {\n    const { RegisterActions } = this.props;\n    const { handleValidateConfirmPassword } = this;\n\n    RegisterActions.changeInput({ value, name });\n\n    if (name === \"passwordCheck\") {\n      handleValidateConfirmPassword({ value });\n    }\n  };\n\n  //Map, setIn으로 바꾸는 작업해야 함\n  //자세한 사항은 Base.js를 참고하길 바람.\n\n  handleValidateConfirmPassword = ({ value }) => {\n    const { RegisterActions, password } = this.props;\n    const passwordCheck = value;\n    RegisterActions.checkPasswordEqual({ password, passwordCheck });\n  };\n  componentDidMount() {\n    const { RegisterActions } = this.props;\n\n    RegisterActions.initialize();\n  }\n\n  render() {\n    const { handleSubmit, onChangeInput, handleValidateConfirmPassword } = this;\n\n    const {\n      message,\n      overlapPoint,\n      lengthCheckID,\n      lengthCheckPassword,\n      lengthCheckPasswordCheck,\n      lengthCheckNickname,\n      passwordEqual\n    } = this.props;\n    return (\n      <RegisterForm\n        handleValidateConfirmPassword={handleValidateConfirmPassword}\n        onChangeInput={onChangeInput}\n        handleSubmit={handleSubmit}\n        message={message}\n        overlapPoint={overlapPoint}\n        passwordEqual={passwordEqual}\n        lengthCheckID={lengthCheckID}\n        lengthCheckPassword={lengthCheckPassword}\n        lengthCheckPasswordCheck={lengthCheckPasswordCheck}\n        lengthCheckNickname={lengthCheckNickname}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    id: state.register.get(\"id\"),\n    password: state.register.get(\"password\"),\n    passwordCheck: state.register.get(\"passwordCheck\"),\n    nickname: state.register.get(\"nickname\"),\n    message: state.register.get(\"message\"),\n    overlapPoint: state.register.get(\"overlapPoint\"),\n    passwordEqual: state.register.get(\"passwordEqual\"),\n    lengthCheckID: state.register.getIn([\"lengthCheck\", \"id\"]),\n    lengthCheckPassword: state.register.getIn([\"lengthCheck\", \"password\"]),\n    lengthCheckPasswordCheck: state.register.getIn([\n      \"lengthCheck\",\n      \"passwordCheck\"\n    ]),\n    lengthCheckNickname: state.register.getIn([\"lengthCheck\", \"nickname\"])\n  }),\n  dispatch => ({\n    RegisterActions: bindActionCreators(registerActions, dispatch)\n  })\n)(withRouter(RegisterFormContainer));\n\n// export default RegisterFormContainer;\n"]},"metadata":{},"sourceType":"module"}